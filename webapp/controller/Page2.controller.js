sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ndc/BarcodeScanner",
	"sap/m/MessageToast",
	"sap/m/MessageBox"
], function (Controller, Scanner, MessageToast, MessageBox) {
	"use strict";

	return Controller.extend("sapphir.createreservation.controller.Page2", {

		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf ul.ip.create_reservation.view.View2
		 */
		onInit: function () {

			this.jModel = this.getOwnerComponent().getModel("jModelWerksLgort");
			this.jModelMaterialData = this.getOwnerComponent().getModel("jModelMaterialData");
			this.oModel = this.getOwnerComponent().getModel("oModelReservation");

			var postavke = [];
			this.oModelPostavke = new sap.ui.model.json.JSONModel({
				postavke: postavke,
				numberOfPostavke: ""
			});

			//model za kreiranje rezervacije
			this.jModelKreirajRezervacijo = new sap.ui.model.json.JSONModel({
				Werks: "",
				LgortFrom: "",
				ReservationItems: []
			});

			this.getView().byId("postavkeList").setModel(this.oModelPostavke);
			this.getView().byId("filterPostavke").setModel(this.oModelPostavke);

			this.getView().byId("buttonAddItem").setEnabled(false);
			this.getView().byId("textMaterial").setVisible(false);

		},

		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf ul.ip.create_reservation.view.View2
		 */
		// onBeforeRendering: function() {
		// 	debugger;
		// },

		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf ul.ip.create_reservation.view.View2
		 */
		onAfterRendering: function () {
			//focus on input
			var that = this;
			setTimeout(function () {
				that.getView().byId("inputMaterial").focus({preventScroll:true});
			}, 350);

		},

		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf ul.ip.create_reservation.view.View2
		 */
		//	onExit: function() {
		//
		//	}

		// Aktiviraj buttonAddItem če je kaj vnešeno v material

		isMaterialEntered: function (oEvent) {
			//This code was generated by the layout editor.
			var inputMaterial = oEvent.getParameters().value;
			var btnStatus = (inputMaterial) ? true : false;
			this.byId("buttonAddItem").setEnabled(btnStatus);

		},

		onSkeniraj: function (oEvent) {
			var that = this;
			Scanner.scan(function (mResult) {
				that.byId("inputMaterial").setValue(mResult.text);
			}, function (Error) {

			});
		},

		getMaterialData: function (oEvent) {
			//1 Predno gremo po podatke na Backend se preveri ali so poskenirali ali vnesli materiali
			var inputMaterial = this.getView().byId("inputMaterial").getValue();
			if (inputMaterial === '' || inputMaterial === undefined || inputMaterial === null) {
				MessageToast.show("Najprej poskeniraj ali vnesi material!", {
					duration: 3500, // default
					width: "15em", // default
					my: "center center", // default
					at: "center center", // default
					of: window, // default
					offset: "0 0", // default
					collision: "fit fit", // default
					onClose: null, // default
					autoClose: true, // default
					animationTimingFunction: "ease", // default
					animationDuration: 1000, // default
					closeOnBrowserNavigation: true // default
				});

				return;
			}

			//2 GET na  backend servris /sap/opu/odata/sap/ZMMGW_UL_IP_MOBILE_SRV/ReservationMaterialDataSet(Matnr='000000000005007155',Werks='2902')
			// Dobimo podatke iz page1 Obrat skladišče
			var jData = this.jModel.getData();
			var sUrl = `/ReservationMaterialDataSet(Matnr=\'00000000000${inputMaterial}\',Werks=\'${jData.Werks}\')`;
			this.oPage = this.byId("page2");
			this.oPage.setBusy(true);
			var that = this;
			this.oModel.read(sUrl, {
				success: function (oData, oResponse) {
					that.oPage.setBusy(false);
					if (oResponse.statusCode === '200') {
						that.getView().byId("textMaterial").setVisible(true);
						//focus on input
						setTimeout(function () {
							that.getView().byId("inputKolicina").focus({preventScroll:true});
						}, 350);
						that.jModelMaterialData.setData(oData);
						that.getView().setModel(that.jModelMaterialData, "jModelMaterialData");
					}
				},
				error: function (oError) {

				}
			});

		},

		addItem: function (oEvent) {
			var reservationItem = {};
			reservationItem.Werks = this.jModel.getData().Werks;
			reservationItem.LgortFrom = '';
			reservationItem.LgortTo = this.jModel.getData().Lgort;
			reservationItem.Bwart = '';
			reservationItem.Matnr = this.jModelMaterialData.getData().Matnr;
			reservationItem.Maktg = this.jModelMaterialData.getData().Maktg;
			reservationItem.Batch = '';
			reservationItem.Quantity = this.jModelMaterialData.getData().Quantity;
			reservationItem.Unit = this.jModelMaterialData.getData().Unit;

			var itemData = this.oModelPostavke.getProperty("/postavke");
			var itemNumber = this.oModelPostavke.getProperty("/numberOfPostavke");
			itemData.push(reservationItem);
			itemNumber = itemData.length;
			itemNumber.toString()
			this.oModelPostavke.setData({
				postavke: itemData,
				numberOfPostavke: itemNumber
			});

			//Brisanje inputa
			this.getView().byId("inputMaterial").setValue(null);
			//refresh jModelMaterialData 
			this.jModelMaterialData.setData(null);

			//focus on input
			jQuery.sap.delayedCall(0, this, function () {
				this.getView().byId("inputMaterial").focus({preventScroll:true});
			});

			//Button addItem --> Diseable
			this.byId("buttonAddItem").setEnabled(true);

			//Material text invisible
			this.getView().byId("textMaterial").setVisible(false);

		},

		deleteItem: function (oEvent) {
			//pridobi vse postavke
			var items = this.oModelPostavke.getProperty("/postavke");
			//pridobi index vrstice na katero je kliknik uporabnik izbriši
			var oList = oEvent.getSource(),
				oItem = oEvent.getParameter("listItem"),
				sPath = oItem.getBindingContext().getPath();
			// spremeni format '/postavke/0' -> 0
			var sliceIndex = parseInt(sPath.slice(10));

			//porbiši postavko iz nabora postavk
			items.forEach(function (el, index) {
				if (index === sliceIndex) {
					items.splice(index, 1);
				}
			});

			//definiraj novo tabelo v model
			this.oModelPostavke.setData({
				postavke: items
			});
		},

		kreirajRezervacijo: function () {
			//1 POST /sap/opu/odata/sap/ZMMGW_UL_IP_MOBILE_SRV/WerksToLgortSet

			//Pridobi postavke
			var postavke = this.oModelPostavke.getProperty("/postavke");
			// Napolni podatke za payload 
			var data = {};
			data.Werks = this.jModel.getData().Werks;
			data.LgortFrom = this.jModel.getData().Lgort;
			data.ReservationItems = postavke;
			//entityset
			var sUrl = '/WerksToLgortSet';
			//klic POST
			this.oPage = this.byId("page2");
			this.oPage.setBusy(true);
			var that = this;
			this.oModel.create(sUrl, data, {
				success: function (oData, response) {
					that.oPage.setBusy(false);
					if (response.statusCode === '201') {
						//uspešno kreirana rezervacija
						if (oData.SuccessError === 'S') {
							//številka rezervacije
							var rezervacija = "Uspešno kreirana rezervacija: " + oData.DocNumber;
							//oData.DocNumber
							MessageBox.success(rezervacija, {
								icon: sap.m.MessageBox.Icon.SUCCESS,
								title: "Obvestilo",
								actions: [sap.m.MessageBox.Action.OK],
								onClose: function (oAction) {
									if (oAction === "OK") {
										// Refreshamo podatke
										that.oModelPostavke.setData(null);
										that.jModelMaterialData.setData(null);
										that.jModel.setData(null);
										//Vrnemo se na page1
										that.getOwnerComponent().getRouter().navTo("RoutePage1", {});
									}
								}
							});
						}
						//Bapi za kreiranje rezervacije je vrnil napako
						if (oData.SuccessError === 'E') {

							MessageBox.error(oData.Msg, {
								icon: sap.m.MessageBox.Icon.ERROR,
								title: "Obvestilo",
								actions: [sap.m.MessageBox.Action.OK],
								onClose: function (oAction) {
									if (oAction === "OK") {
										// Kaj naredimo ko je bapi napaka?
									}
								}
							});

						}
					}
				},
				error: function (error) {
					alert('Povezava na SAP ne deluje!')
				}
			});

		},

		onBack: function () {
			//pridobi vse postavke predno gredo nazaj
			var items = this.oModelPostavke.getProperty("/postavke");

			if (items.length > 0) {
				var that = this;
				MessageBox.error("Zapuščate stran in imate komisionirane postavke. Ali res želite zapustiti stran in izgubiti podatke?", {
					icon: sap.m.MessageBox.Icon.ERROR,
					title: "Obvestilo",
					actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
					onClose: function (oAction) {
						if (oAction === "YES") {
							// Refreshamo podatke
							that.oModelPostavke.setData(null);
							that.jModelMaterialData.setData(null);
							that.jModel.setData(null);
							that.getOwnerComponent().getRouter().navTo("RoutePage1", {});
						}
						if(oAction === "NO"){
							return;
						}
					}
				});

			} else {
				this.getOwnerComponent().getRouter().navTo("RoutePage1", {});
			}

		}

	});

});